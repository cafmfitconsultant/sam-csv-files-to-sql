AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-csv-files-to-sql

  Sample SAM Template for  sam-csv-files-to-sql

Parameters:
  FileRepositoryBucketName:
    Type: String
    Description: "REQUIRED: Unique S3 bucket name to use for the app."
    Default: file-repository-bucket

  EnvName:
    Type: String
    Description: Name of an environment.
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
    Default: "cafmf"

Resources:
  NodeModuleLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName:
            !Join
              - "-"
              - - file-import-layer
                - !Ref EnvName
        Description: Dependencies for sam app
        ContentUri: dependencies/
        CompatibleRuntimes:
          - nodejs14.x
        LicenseInfo: 'MIT'

  FileImportStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      Name: 
        !Join
          - "-"
          - - file-import-state-machine
            - !Ref EnvName
      DefinitionUri: s3-event-statemachine/file-import.asl.json
      DefinitionSubstitutions:
        DataTransformerFunctionArn: !GetAtt DataTransformerFunction.Arn
        DataSaverFunctionArn: !GetAtt DataSaverFunction.Arn
      Role:
        !GetAtt StateMachineExecutionRole.Arn

  DataTransformerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/data-transformer/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Timeout: 60
      Layers:
        - !Ref NodeModuleLayer
      Role: !GetAtt StepsExecutionRole.Arn

  FileRepositoryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - !Ref FileRepositoryBucketName
          - !Ref EnvName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt S3WatcherFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: zip/
                  - Name: suffix
                    Value: .zip

  BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref S3WatcherFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: 
          !Join
            - ""
            - - "arn:aws:s3:::"
              - !Join
                - "-"
                - - !Ref FileRepositoryBucketName
                  - !Ref EnvName

  DataSaverFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/data-saver/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref NodeModuleLayer
      Role: !GetAtt StepsExecutionRole.Arn

  S3WatcherFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/s3-watcher/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Role: !GetAtt S3WatcherExecutionRole.Arn
      Timeout: 30
      Layers:
        - !Ref NodeModuleLayer
      Environment:
        Variables:
          statemachine_arn: !Ref FileImportStateMachine

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: [states.amazonaws.com] }
            Action: ["sts:AssumeRole"]
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                Resource: 
                  !Join
                    - ""
                    - - "arn:aws:s3:::"
                      - !Join
                        - "-"
                        - - !Ref FileRepositoryBucketName
                          - !Ref EnvName
                      - "/*"

  StepsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: ["sts:AssumeRole"]
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: FullPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                Resource: 
                  !Join
                    - ""
                    - - "arn:aws:s3:::"
                      - !Join
                        - "-"
                        - - !Ref FileRepositoryBucketName
                          - !Ref EnvName
                      - "/*"

  S3WatcherExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: ["sts:AssumeRole"]
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: FullPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref FileImportStateMachine
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                Resource: 
                  !Join
                    - ""
                    - - "arn:aws:s3:::"
                      - !Join
                        - "-"
                        - - !Ref FileRepositoryBucketName
                          - !Ref EnvName
                      - "/*"
